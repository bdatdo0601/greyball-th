version: '3.8'

# Development Docker Compose with Hot Reload
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: document-management-db-dev
    environment:
      POSTGRES_DB: document_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - document-management-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d document_management"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: document-management-api-dev
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: document_management
      DB_USER: postgres
      DB_PASSWORD: password
      DATABASE_URL: postgresql://postgres:password@postgres:5432/document_management
      
      # Server Configuration
      PORT: 3001
      HOST: 0.0.0.0
      NODE_ENV: development
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - document-management-dev-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Frontend Web Application (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: document-management-web-dev
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NODE_ENV: development
      WATCHPACK_POLLING: true  # Enable polling for file changes in Docker
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - document-management-dev-network
    depends_on:
      - backend
    restart: unless-stopped

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: document-management-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - document-management-dev-network
    depends_on:
      - postgres

# Named volumes for data persistence
volumes:
  postgres_dev_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom network
networks:
  document-management-dev-network:
    driver: bridge
